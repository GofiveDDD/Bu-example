# -*- coding: utf-8 -*-
"""““master_class_gs.ipynb”

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ylKs_bVwfuWpQ7RwYEz4odINvjh3FEyI
"""

from google.colab import drive
drive.mount('/content/drive')

cd /content/drive/MyDrive/master_class_show

!git clone https://github.com/lkeab/gaussian-grouping.git

!apt-get install python3.8

!pip install torch torchvision torchaudio

!pip install plyfile==0.8.1

!pip install tqdm scipy wandb opencv-python scikit-learn lpips

cd /content/drive/MyDrive/master_class_show/gaussian-grouping

!pip install submodules/diff-gaussian-rasterization

!pip install submodules/simple-knn

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/master_class_show/gaussian-grouping/Tracking-Anything-with-DEVA

!pip install -e .

!bash scripts/download_models.sh

!git clone https://github.com/IDEA-Research/Grounded-Segment-Anything.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/master_class_show/gaussian-grouping/Grounded-Segment-Anything

!export AM_I_DOCKER=False

!export BUILD_WITH_CUDA=True

!python -m pip install -e segment_anything

!python -m pip install -e GroundingDINO

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!sudo apt-get install \
    git \
    cmake \
    ninja-build \
    build-essential \
    libboost-program-options-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-system-dev \
    libeigen3-dev \
    libflann-dev \
    libfreeimage-dev \
    libmetis-dev \
    libgoogle-glog-dev \
    libgtest-dev \
    libsqlite3-dev \
    libglew-dev \
    qtbase5-dev \
    libqt5opengl5-dev \
    libcgal-dev \
    libceres-dev

!sudo apt-get install libatlas-base-dev libsuitesparse-dev

cd /content

!git clone https://ceres-solver.googlesource.com/ceres-solver

# Commented out IPython magic to ensure Python compatibility.
# %cd ceres-solver

!git checkout $(git describe --tags)

# Commented out IPython magic to ensure Python compatibility.
# %mkdir build
# %cd build

!cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF

!make

!sudo make install

!git clone https://github.com/colmap/colmap

# Commented out IPython magic to ensure Python compatibility.
# %cd colmap

# Commented out IPython magic to ensure Python compatibility.
# %mkdir build
# %cd build

!cmake ..

!make

!sudo make install

!CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 cmake ..

cd /content/drive/MyDrive/master_class_show/gaussian-grouping

!python convert.py -s data

cd /content/drive/MyDrive/master_class_show/gaussian-grouping

!bash script/prepare_pseudo_label.sh pisa_test 1

!bash script/train.sh pisa_test 1

!cd /content/drive/MyDrive/master_class_show/gaussian-grouping

!bash script/prepare_pseudo_label.sh pisa 1

!bash script/train.sh pisa 1

import os
import cv2
import numpy as np

def load_mask(mask_path):
    #Load mask image
    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
    if mask is None:
        raise FileNotFoundError(f"Mask image not found: {mask_path}")
    return mask

def get_center_pixel_id(mask):
    # Get the coordinates of the center point of the image
    h, w = mask.shape
    center_x, center_y = w // 2, h // 2
    # Get the pixel value of the center point
    center_pixel_id = mask[center_y, center_x]
    return center_pixel_id

def main(mask_folder):
    mask_files = [f for f in os.listdir(mask_folder) if f.endswith('.png')]
    if not mask_files:
        raise FileNotFoundError("No mask file found")

    # Process the first mask image
    first_mask_file = mask_files[0]
    mask_path = os.path.join(mask_folder, first_mask_file)
    mask = load_mask(mask_path)
    center_pixel_id = get_center_pixel_id(mask)

    print(f"mask file {first_mask_file} The object ID of the center point: {center_pixel_id}")
    return first_mask_file, center_pixel_id

# Mask folder path
mask_folder = '/content/drive/MyDrive/master_class/data/pisa/object_mask'
first_mask_file, center_pixel_id = main(mask_folder)

#Print the center point object ID in the first mask file
print(f"{first_mask_file} Center point object ID: {center_pixel_id}")

!bash script/edit_object_removal.sh output/pisa config/object_removal/bear.json